{"ast":null,"code":"import axios from 'axios';\nimport { ActionType } from '../action-types';\nexport const searchRepositories = term => {\n  return async dispatch => {\n    dispatch: ({\n      type: ActionType.SEARCH_REPOSITORIES\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get('https://registry.npmjs.org/-/v1/search', {\n        params: {\n          text: term\n        }\n      });\n      const names = data.objects.map(result => {\n        return result.package.name;\n      });\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/johnny/props/redux-ts/src/state/action-creators/index.ts"],"names":["axios","ActionType","searchRepositories","term","dispatch","type","SEARCH_REPOSITORIES","data","get","params","text","names","objects","map","result","package","name","SEARCH_REPOSITORIES_SUCCESS","payload","err","SEARCH_REPOSITORIES_ERROR","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,UAAR,QAAyB,iBAAzB;AAGA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAiB;AACjD,SAAO,MAAOC,QAAP,IAAqC;AAC1CA,IAAAA,QAAQ,EAAE,CAAC;AACTC,MAAAA,IAAI,EAAEJ,UAAU,CAACK;AADR,KAAD;;AAIV,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMP,KAAK,CAACQ,GAAN,CAAU,wCAAV,EAAoD;AACzEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAEP;AADA;AADiE,OAApD,CAAvB;AAMA,YAAMQ,KAAK,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAiB;AAC9C,eAAOA,MAAM,CAACC,OAAP,CAAeC,IAAtB;AACD,OAFa,CAAd;AAIAZ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,UAAU,CAACgB,2BADV;AAEPC,QAAAA,OAAO,EAAEP;AAFF,OAAD,CAAR;AAID,KAfD,CAeE,OAAOQ,GAAP,EAAgB;AAChBf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,UAAU,CAACmB,yBADV;AAEPF,QAAAA,OAAO,EAACC,GAAG,CAACE;AAFL,OAAD,CAAR;AAID;AACF,GA1BD;AA2BD,CA5BM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport {ActionType} from '../action-types';\nimport {Action} from '../actions';\n\nexport const searchRepositories = (term:string) => {\n  return async (dispatch:Dispatch<Action>) => {\n    dispatch: ({\n      type: ActionType.SEARCH_REPOSITORIES\n    });\n\n    try {\n      const { data } = await axios.get('https://registry.npmjs.org/-/v1/search', {\n        params: {\n          text: term,\n        },\n      });\n\n      const names = data.objects.map((result: any) => {\n        return result.package.name;\n      });\n\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names\n      });\n    } catch (err:any) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload:err.message\n      })  \n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}